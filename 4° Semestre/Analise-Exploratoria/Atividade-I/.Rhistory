theme_minimal(base_size = 15) +
theme(
panel.grid.major = element_line(color = "grey80", size = 0.5),
panel.grid.minor = element_blank(),
legend.position = "none",
plot.title = element_text(face = "bold", size = 18) # Ajusta o tamanho do título
)
ggplot(dados, aes(x = idade, y = Q12)) +
geom_boxplot(alpha = 0.7, fill = "#007bff", color = "#007bff") + # Adiciona cor azul clara ao boxplot
labs(
title = "Frequência de Uso de Consoles por Idade", # Ajusta o título
x = "Idade",
y = "Frequência de Uso (vezes por semana)" # Melhora a legenda do eixo y
) +
theme_minimal(base_size = 15) +
theme(
panel.grid.major = element_line(color = "grey80", size = 0.5),
panel.grid.minor = element_blank(),
legend.position = "none",
plot.title = element_text(face = "bold", size = 18) # Ajusta o tamanho do título
)
ggplot(dados_agrupados, aes(x = idade, y = media_Q12, fill = factor(idade))) +
geom_boxplot(alpha = 0.7) +
labs(
title = "Frequência de Uso de Consoles por Idade",
x = "Idade",
y = "Frequência de Uso (vezes por semana)"
) +
theme_minimal(base_size = 15) +
theme(
panel.grid.major = element_line(color = "grey80", size = 0.5),
panel.grid.minor = element_blank(),
legend.position = "right",
plot.title = element_text(face = "bold", size = 18),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)
) +
scale_fill_discrete(name = "Idade")
dados_agrupados <- dados %>%
group_by(idade) %>%
summarize(media_Q12 = mean(Q12))
ggplot(dados_agrupados, aes(x = idade, y = media_Q12, fill = factor(idade))) +
geom_boxplot(alpha = 0.7) +
labs(
title = "Frequência de Uso de Consoles por Idade",
x = "Idade",
y = "Frequência de Uso (vezes por semana)"
) +
theme_minimal(base_size = 15) +
theme(
panel.grid.major = element_line(color = "grey80", size = 0.5),
panel.grid.minor = element_blank(),
legend.position = "right",
plot.title = element_text(face = "bold", size = 18),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12)
) +
scale_fill_discrete(name = "Idade")
ggplot(dados, aes(x = Q13, y = Q14)) +
geom_boxplot(alpha = 0.7, fill = "#007bff", color = "#007bff") + # Adiciona cor azul clara ao boxplot
labs(
title = "Frequencia de uso de Apps de jogos", # Ajusta o título
x = "Escala de 1 a 100",
y = "Frequência de Uso" # Melhora a legenda do eixo y
) +
theme_minimal(base_size = 15) +
theme(
panel.grid.major = element_line(color = "grey80", size = 0.5),
panel.grid.minor = element_blank(),
legend.position = "none",
plot.title = element_text(face = "bold", size = 18) # Ajusta o tamanho do título
)
ggplot(dados, aes(x = Q13, y = Q14, fill = "Jogos")) +  # Mapeia o 'fill' para uma legenda
geom_boxplot(alpha = 0.7, color = "#007bff") +  # Mantém a cor da borda azul
scale_fill_manual(values = "#007bff", name = "Categoria de Aplicativos") +  # Define a cor e o nome da legenda
labs(
title = "Frequência de Uso de Apps de Jogos",  # Ajusta o título
x = "Escala de 1 a 100",
y = "Frequência de Uso"  # Melhora a legenda do eixo y
) +
theme_minimal(base_size = 15) +
theme(
panel.grid.major = element_line(color = "grey80", size = 0.5),
panel.grid.minor = element_blank(),
legend.position = "top",  # Posiciona a legenda no topo
plot.title = element_text(face = "bold", size = 18),  # Ajusta o tamanho do título
legend.title = element_text(face = "bold", size = 14),  # Estiliza o título da legenda
legend.text = element_text(size = 12)  # Estiliza o texto da legenda
)
ggplot(dados, aes(x = Q13, y = Q14, fill = Q13)) +  # Mapeia Q13 para 'fill' para criar a legenda com a escala
geom_boxplot(alpha = 0.7, color = "#007bff") +  # Mantém a borda azul
scale_fill_gradient(low = "#ADD8E6", high = "#007bff", name = "Escala de Uso") +  # Adiciona gradiente e legenda
labs(
title = "Frequência de Uso de Apps de Jogos",  # Ajusta o título
x = "Escala de 1 a 100",
y = "Frequência de Uso"  # Melhora a legenda do eixo y
) +
theme_minimal(base_size = 15) +
theme(
panel.grid.major = element_line(color = "grey80", size = 0.5),
panel.grid.minor = element_blank(),
legend.position = "right",  # Posiciona a legenda à direita
plot.title = element_text(face = "bold", size = 18),  # Ajusta o tamanho do título
legend.title = element_text(face = "bold", size = 14),  # Estiliza o título da legenda
legend.text = element_text(size = 12)  # Estiliza o texto da legenda
)
ggplot(dados, aes(x = Q13, y = Q14, fill = factor(Q13))) +  # Mapeia Q13 para 'fill' e converte para fator para legenda
geom_boxplot(alpha = 0.7, color = "#007bff") +  # Define a borda azul
scale_fill_manual(values = colorRampPalette(c("#ADD8E6", "#007bff"))(length(unique(dados$Q13))),
name = "Escala de Uso") +  # Adiciona a escala como legenda com gradiente manual
labs(
title = "Frequência de Uso de Apps de Jogos",  # Ajusta o título
x = "Escala de 1 a 100",
y = "Frequência de Uso"  # Ajusta a legenda do eixo Y
) +
theme_minimal(base_size = 15) +
theme(
panel.grid.major = element_line(color = "grey80", size = 0.5),
panel.grid.minor = element_blank(),
legend.position = "right",  # Posiciona a legenda à direita
plot.title = element_text(face = "bold", size = 18),  # Ajusta o tamanho do título
legend.title = element_text(face = "bold", size = 14),  # Estiliza o título da legenda
legend.text = element_text(size = 12)  # Estiliza o texto da legenda
)
ggplot(dados, aes(x = Q13, y = Q14, fill = Q13)) +  # Mapeia Q13 para 'fill' sem quebrar o boxplot
geom_boxplot(alpha = 0.7, color = "#007bff") +  # Mantém a borda azul
scale_fill_gradient(low = "#ADD8E6", high = "#007bff", name = "Escala de Uso") +  # Gradiente com legenda
labs(
title = "Frequência de Uso de Apps de Jogos",  # Ajusta o título
x = "Escala de 1 a 100",
y = "Frequência de Uso"  # Ajusta a legenda do eixo Y
) +
theme_minimal(base_size = 15) +
theme(
panel.grid.major = element_line(color = "grey80", size = 0.5),
panel.grid.minor = element_blank(),
legend.position = "right",  # Posiciona a legenda à direita
plot.title = element_text(face = "bold", size = 18),  # Ajusta o tamanho do título
legend.title = element_text(face = "bold", size = 14),  # Estiliza o título da legenda
legend.text = element_text(size = 12)  # Estiliza o texto da legenda
)
ggplot(dados, aes(x = Q14, y = Q20)) +
geom_boxplot(alpha = 0.7, fill = "#007bff", color = "#007bff") + # Adiciona cor azul clara ao boxplot
labs(
title = "Frequencia de uso de Apps de jogos", # Ajusta o título
x = "Escala de 1 a 100",
y = "Frequência de Uso" # Melhora a legenda do eixo y
) +
theme_minimal(base_size = 15) +
theme(
panel.grid.major = element_line(color = "grey80", size = 0.5),
panel.grid.minor = element_blank(),
legend.position = "none",
plot.title = element_text(face = "bold", size = 18) # Ajusta o tamanho do título
)
ggplot(dados, aes(x = Q20, y = Q14)) +
geom_boxplot(alpha = 0.7, fill = "#007bff", color = "#007bff") + # Adiciona cor azul clara ao boxplot
labs(
title = "Frequencia de uso de Apps de jogos", # Ajusta o título
x = "Escala de 1 a 100",
y = "Frequência de Uso" # Melhora a legenda do eixo y
) +
theme_minimal(base_size = 15) +
theme(
panel.grid.major = element_line(color = "grey80", size = 0.5),
panel.grid.minor = element_blank(),
legend.position = "none",
plot.title = element_text(face = "bold", size = 18) # Ajusta o tamanho do título
)
ggplot(dados, aes(x = Q13, y = Q14)) +
geom_boxplot(alpha = 0.7, fill = "#007bff", color = "#007bff") + # Adiciona cor azul clara ao boxplot
labs(
title = "Frequencia de uso de Apps de jogos", # Ajusta o título
x = "Escala de 1 a 100",
y = "Frequência de Uso" # Melhora a legenda do eixo y
) +
theme_minimal(base_size = 15) +
theme(
panel.grid.major = element_line(color = "grey80", size = 0.5),
panel.grid.minor = element_blank(),
legend.position = "none",
plot.title = element_text(face = "bold", size = 18) # Ajusta o tamanho do título
)
ggplot(dados, aes(x = factor(Q13), y = Q14, fill = factor(Q13))) +  # Mapeia Q13 para 'fill' e converte para fator
geom_boxplot(alpha = 0.7, color = "#007bff") +  # Define a cor da borda
scale_fill_manual(values = c("#FF9999", "#FF6666", "#FF3333", "#FF0000", "#CC0000",
"#990000", "#660000", "#330000", "#000066", "#000099"),
name = "Escala de Uso") +  # Define cores e nome da legenda
labs(
title = "Frequência de Uso de Apps de Jogos",  # Ajusta o título
x = "Escala de 1 a 10",
y = "Frequência de Uso"  # Ajusta a legenda do eixo Y
) +
theme_minimal(base_size = 15) +
theme(
panel.grid.major = element_line(color = "grey80", size = 0.5),
panel.grid.minor = element_blank(),
legend.position = "right",  # Posiciona a legenda à direita
plot.title = element_text(face = "bold", size = 18),  # Ajusta o tamanho do título
legend.title = element_text(face = "bold", size = 14),  # Estiliza o título da legenda
legend.text = element_text(size = 12)  # Estiliza o texto da legenda
)
ggplot(dados, aes(x = Q13, y = Q14, fill = factor(Q13))) +  # Mapeia Q13 para 'fill' sem alterar o formato
geom_boxplot(alpha = 0.7, color = "#007bff") +  # Mantém a borda azul
scale_fill_manual(values = c("#FF9999", "#FF6666", "#FF3333", "#FF0000", "#CC0000",
"#990000", "#660000", "#330000", "#000066", "#000099"),
name = "Escala de Uso (1 a 10)") +  # Define cores e nome da legenda
labs(
title = "Frequência de Uso de Apps de Jogos",  # Ajusta o título
x = "Escala de 1 a 100",  # Mantém o eixo X original
y = "Frequência de Uso"  # Mantém o eixo Y original
) +
theme_minimal(base_size = 15) +
theme(
panel.grid.major = element_line(color = "grey80", size = 0.5),
panel.grid.minor = element_blank(),
legend.position = "right",  # Posiciona a legenda à direita
plot.title = element_text(face = "bold", size = 18),  # Ajusta o tamanho do título
legend.title = element_text(face = "bold", size = 14),  # Estiliza o título da legenda
legend.text = element_text(size = 12)  # Estiliza o texto da legenda
)
# Criando o boxplot com linha de média
ggplot(dados, aes(x = factor(Q13), y = Q14, fill = factor(Q13))) +  # Mapeia Q13 para 'fill' e converte para fator
geom_boxplot(alpha = 0.7, color = "#007bff") +  # Define a cor da borda
geom_hline(yintercept = media_dados, linetype = "dashed", color = "red", size = 1) +  # Adiciona linha de média
scale_fill_manual(values = c("#FF9999", "#FF6666", "#FF3333", "#FF0000", "#CC0000",
"#990000", "#660000", "#330000", "#000066", "#000099"),
name = "Escala de Uso (1 a 10)") +  # Define cores e nome da legenda
labs(
title = "Frequência de Uso de Apps de Jogos",  # Ajusta o título
x = "Escala de 1 a 10",  # Atualiza o eixo X
y = "Frequência de Uso"  # Atualiza o eixo Y
) +
theme_minimal(base_size = 15) +
theme(
panel.grid.major = element_line(color = "grey80", size = 0.5),
panel.grid.minor = element_blank(),
legend.position = "right",  # Posiciona a legenda à direita
plot.title = element_text(face = "bold", size = 18),  # Ajusta o tamanho do título
legend.title = element_text(face = "bold", size = 14),  # Estiliza o título da legenda
legend.text = element_text(size = 12)  # Estiliza o texto da legenda
)
# Calculando a média dos dados
media_dados <- mean(dados$Q14, na.rm = TRUE)
# Criando o boxplot com linha de média
ggplot(dados, aes(x = factor(Q13), y = Q14, fill = factor(Q13))) +  # Mapeia Q13 para 'fill' e converte para fator
geom_boxplot(alpha = 0.7, color = "#007bff") +  # Define a cor da borda
geom_hline(yintercept = media_dados, linetype = "dashed", color = "red", size = 1) +  # Adiciona linha de média
scale_fill_manual(values = c("#FF9999", "#FF6666", "#FF3333", "#FF0000", "#CC0000",
"#990000", "#660000", "#330000", "#000066", "#000099"),
name = "Escala de Uso (1 a 10)") +  # Define cores e nome da legenda
labs(
title = "Frequência de Uso de Apps de Jogos",  # Ajusta o título
x = "Escala de 1 a 10",  # Atualiza o eixo X
y = "Frequência de Uso"  # Atualiza o eixo Y
) +
theme_minimal(base_size = 15) +
theme(
panel.grid.major = element_line(color = "grey80", size = 0.5),
panel.grid.minor = element_blank(),
legend.position = "right",  # Posiciona a legenda à direita
plot.title = element_text(face = "bold", size = 18),  # Ajusta o tamanho do título
legend.title = element_text(face = "bold", size = 14),  # Estiliza o título da legenda
legend.text = element_text(size = 12)  # Estiliza o texto da legenda
)
ggplot(dados, aes(x = Q13, y = Q14)) +
geom_boxplot(alpha = 0.7, fill = "#007bff", color = "#007bff") + # Adiciona cor azul clara ao boxplot
labs(
title = "Frequencia de uso de Apps de jogos", # Ajusta o título
x = "Escala de 1 a 100",
y = "Frequência de Uso" # Melhora a legenda do eixo y
) +
theme_minimal(base_size = 15) +
theme(
panel.grid.major = element_line(color = "grey80", size = 0.5),
panel.grid.minor = element_blank(),
legend.position = "none",
plot.title = element_text(face = "bold", size = 18) # Ajusta o tamanho do título
)
# Exemplo com `Q14` como variável para a cor
ggplot(dados, aes(x = Q13, y = Q14, fill = Q14)) +
geom_boxplot(alpha = 0.7, color = "#007bff") + # Adiciona cor azul clara ao boxplot
labs(
title = "Frequência de Uso de Apps de Jogos", # Ajusta o título
x = "Escala de 1 a 100",
y = "Frequência de Uso" # Melhora a legenda do eixo y
) +
scale_fill_manual(values = c("Sempre" = "#007bff", "Frequentemente" = "#00bfae", "Às vezes" = "#ff6f61", "Quase Nunca" = "#d9534f")) + # Ajusta as cores para a legenda
theme_minimal(base_size = 15) +
theme(
panel.grid.major = element_line(color = "grey80", size = 0.5),
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold", size = 18), # Ajusta o tamanho do título
legend.title = element_text(face = "bold"), # Ajusta o título da legenda
legend.position = "right" # Ajusta a posição da legenda
)
# Gráfico de Dispersão
renderPlot({
ggplot(data = dados, aes(x = idade, y = freqCell, color = idade)) +
geom_jitter(size = 3, alpha = 0.7) +
labs(title = "Frequência de uso de celular por idade",
x = "Idade",
y = "Frequência de uso de celular",
color = "Idade") +
theme_minimal()
})
# Gráfico de Dispersão
renderPlot(
ggplot(data = dados, aes(x = idade, y = freqCell, color = idade)) +
geom_jitter(size = 3, alpha = 0.7) +
labs(title = "Frequência de uso de celular por idade",
x = "Idade",
y = "Frequência de uso de celular",
color = "Idade") +
theme_minimal()
)
# Grafico de Boxplot
ggplot(dados, aes(x = Q13, y = Q14, fill = Q14)) +
geom_boxplot(alpha = 0.7, color = "#007bff") +
labs(
title = "Frequência de Uso de Apps de Jogos",
x = "Escala de 1 a 100",
y = "Frequência de Uso"
) +
scale_fill_manual(values = c("Sempre" = "#007bff", "Frequentemente" = "#00bfae", "Às vezes" = "#ff6f61", "Quase Nunca" = "#d9534f")) +
theme_minimal(base_size = 15) +
theme(
panel.grid.major = element_line(color = "grey80", size = 0.5),
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold", size = 18),
legend.title = element_text(face = "bold"),
legend.position = "right"
)
ggplot(data = dados, aes(x = idade, y = freqCell, color = idade)) +
geom_jitter(size = 3, alpha = 0.7) +
labs(title = "Frequência de uso de celular por idade",
x = "Idade",
y = "Frequência de uso de celular",
color = "Idade") +
theme_minimal()
ggplot(data = dados, aes(x = idade, y = freqCell, color = idade)) +
geom_jitter(size = 3, alpha = 0.7) +
labs(title = "Frequência de uso de celular por idade",
x = "Idade",
y = "Frequência de uso de celular",
color = "Idade") +
theme_minimal()
ggplot(data = dados, aes(x = idade, y = freqCell, color = idade)) +
geom_jitter(size = 3, alpha = 0.7) +
labs(title = "Frequência de uso de celular por idade",
x = "Idade",
y = "Frequência de uso de celular",
color = "Idade") +
theme_minimal()
library(flexdashboard)
ggplot(data = dados, aes(x = idade, y = freqCell, color = idade)) +
geom_jitter(size = 3, alpha = 0.7) +
labs(title = "Frequência de uso de celular por idade",
x = "Idade",
y = "Frequência de uso de celular",
color = "Idade") +
theme_minimal()
library(rbokeh)
library(flexdashboard)
(rbokeh)
library(flexdashboard)
library(shiny)
library(jsonlite)
library(maptools)
library(ggplot2)
library(tidyr)
library(dplyr)
library(purrr)
library(leaflet)
library(plotly)
# Grafico de Dispersão
library(ggplot2)
library(readxl)
library(dplyr)
dados <- read_xlsx("Atividade1_TI4A-1.xlsx")
dados <- rename(dados, idade = Q1, freqCell = Q7)
ggplot(data = dados, aes(x = idade, y = freqCell, color = idade)) +
geom_jitter(size = 3, alpha = 0.7) +
labs(title = "Frequência de uso de celular por idade",
x = "Idade",
y = "Frequência de uso de celular",
color = "Idade") +
theme_minimal()
ggplot(data = dados, aes(x = idade, y = freqCell, color = idade)) +
geom_jitter(size = 3, alpha = 0.7) +
labs(title = "Frequência de uso de celular por idade",
x = "Idade",
y = "Frequência de uso de celular",
color = "Idade") +
theme_minimal()
geom_point
=======================================================================
```{r}
# Grafico de Barras
library(ggplot2)
ggplot(dados, aes(x = idade, fill = factor(Q3))) +
geom_bar() +
labs(title = "Distribuição de Idade dos Participantes",
x = "Idade",
y = "Número de Participantes") +
theme_minimal()
ggplot(dados, aes(x = idade, fill = factor(Q3))) +
geom_bar() +
labs(title = "Distribuição de Idade dos Participantes",
x = "Idade",
y = "Número de Participantes") +
theme_minimal()
```{r, echo=FALSE}
### geom_smooth Linear Regression
```{r}
p <- ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)   # Add linear regression line
ggplotly(p)
p <- ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)   # Add linear regression line
Row
### geom_smooth with Loess Smoothed Fit
```{r}
p <- ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth()            # Add a loess smoothed fit curve with confidence region
ggplotly(p)
p <- ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth()            # Add a loess smoothed fit curve with confidence region
### Constraining Slope with stat_smooth
```{r}
n <- 20
x1 <- rnorm(n); x2 <- rnorm(n)
y1 <- 2 * x1 + rnorm(n)
y2 <- 3 * x2 + (2 + rnorm(n))
A <- as.factor(rep(c(1, 2), each = n))
df <- data.frame(x = c(x1, x2), y = c(y1, y2), A = A)
fm <- lm(y ~ x + A, data = df)
p <- ggplot(data = cbind(df, pred = predict(fm)), aes(x = x, y = y, color = A))
p <- p + geom_point() + geom_line(aes(y = pred))
ggplotly(p)
p <- ggplot(data = cbind(df, pred = predict(fm)), aes(x = x, y = y, color = A))
p <- p + geom_point() + geom_line(aes(y = pred))
ggplotly(p)
geom_density
=======================================================================
Row
### stat_density Example
```{r}
dfGamma = data.frame(nu75 = rgamma(100, 0.75),
nu1 = rgamma(100, 1),
nu2 = rgamma(100, 2))
dfGamma = stack(dfGamma)
p <- ggplot(dfGamma, aes(x = values)) +
stat_density(aes(group = ind, color = ind),position="identity",geom="line")
ggplotly(p)
p <- ggplot(dfGamma, aes(x = values)) +
stat_density(aes(group = ind, color = ind),position="identity",geom="line")
ggplotly(p)
### Add Conditional Density Curves to Plot
```{r}
dim1 <- c(rnorm(100, mean=1), rnorm(100, mean=4))
dados <- rename(dados, idade = Q1, freqCell = Q7)
View(dados)
View(dados)
dados <- rename(dados, idade = Q1, freqCell = Q7)
ggplot(data = dados, aes(x = idade, y = freqCell, color = idade)) +
geom_jitter(size = 3, alpha = 0.7) +
labs(title = "Frequência de uso de celular por idade",
x = "Idade",
y = "Frequência de uso de celular",
color = "Idade") +
theme_minimal()
dados <- read_xlsx("Atividade1_TI4A-1.xlsx")
View(dados)
renderPlot({
ggplot(data = dados, aes(x = idade, y = freqCell, color = idade)) +
geom_jitter(size = 3, alpha = 0.7) +
labs(title = "Frequência de uso de celular por idade",
x = "Idade",
y = "Frequência de uso de celular",
color = "Idade") +
theme_minimal()
}, outputArgs = list(brush = brushOpts(id = "plot_brush")))
# Carregar bibliotecas e dados
library(ggplot2)
library(readxl)
library(dplyr)
# Carregar e preparar os dados
dados <- read_xlsx("Atividade1_TI4A-1.xlsx")
dados <- rename(dados, idade = Q1, freqCell = Q7)
# Carregar e preparar os dados
dados <- read_xlsx("Atividade1_TI4A-1.xlsx")
dados <- rename(dados, idade = Q1, freqCell = Q7)
```{r}
# Reactive que retorna os dados completos ou os dados selecionados pelo brush
selectedData <- reactive({
data <- brushedPoints(dados, input$plot_brush)
if (nrow(data) == 0)
data <- dados
data
})
# Reactive que retorna os dados completos ou os dados selecionados pelo brush
selectedData <- reactive({
data <- brushedPoints(dados, input$plot_brush)
if (nrow(data) == 0)
data <- dados
data
})
